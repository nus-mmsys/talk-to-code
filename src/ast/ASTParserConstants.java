/* Generated By:JavaCC: Do not edit this line. ASTParserConstants.java */
package ast;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ASTParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int _LOOKAHEAD = 1;
  /** RegularExpression Id. */
  int _IGNORE_CASE = 2;
  /** RegularExpression Id. */
  int _PARSER_BEGIN = 3;
  /** RegularExpression Id. */
  int _PARSER_END = 4;
  /** RegularExpression Id. */
  int _JAVACODE = 5;
  /** RegularExpression Id. */
  int _TOKEN = 6;
  /** RegularExpression Id. */
  int _SPECIAL_TOKEN = 7;
  /** RegularExpression Id. */
  int _MORE = 8;
  /** RegularExpression Id. */
  int _SKIP = 9;
  /** RegularExpression Id. */
  int _TOKEN_MGR_DECLS = 10;
  /** RegularExpression Id. */
  int _EOF = 11;
  /** RegularExpression Id. */
  int ABSTRACT = 19;
  /** RegularExpression Id. */
  int ASSERT = 20;
  /** RegularExpression Id. */
  int BOOLEAN = 21;
  /** RegularExpression Id. */
  int BREAK = 22;
  /** RegularExpression Id. */
  int BYTE = 23;
  /** RegularExpression Id. */
  int CASE = 24;
  /** RegularExpression Id. */
  int CATCH = 25;
  /** RegularExpression Id. */
  int CHAR = 26;
  /** RegularExpression Id. */
  int CLASS = 27;
  /** RegularExpression Id. */
  int CONST = 28;
  /** RegularExpression Id. */
  int CONTINUE = 29;
  /** RegularExpression Id. */
  int _DEFAULT = 30;
  /** RegularExpression Id. */
  int DO = 31;
  /** RegularExpression Id. */
  int DOUBLE = 32;
  /** RegularExpression Id. */
  int ELSE = 33;
  /** RegularExpression Id. */
  int ENUM = 34;
  /** RegularExpression Id. */
  int EXTENDS = 35;
  /** RegularExpression Id. */
  int FALSE = 36;
  /** RegularExpression Id. */
  int FINAL = 37;
  /** RegularExpression Id. */
  int FINALLY = 38;
  /** RegularExpression Id. */
  int FLOAT = 39;
  /** RegularExpression Id. */
  int FOR = 40;
  /** RegularExpression Id. */
  int GOTO = 41;
  /** RegularExpression Id. */
  int IF = 42;
  /** RegularExpression Id. */
  int IMPLEMENTS = 43;
  /** RegularExpression Id. */
  int IMPORT = 44;
  /** RegularExpression Id. */
  int INSTANCEOF = 45;
  /** RegularExpression Id. */
  int INT = 46;
  /** RegularExpression Id. */
  int INTERFACE = 47;
  /** RegularExpression Id. */
  int LONG = 48;
  /** RegularExpression Id. */
  int NATIVE = 49;
  /** RegularExpression Id. */
  int NEW = 50;
  /** RegularExpression Id. */
  int NULL = 51;
  /** RegularExpression Id. */
  int PACKAGE = 52;
  /** RegularExpression Id. */
  int PRIVATE = 53;
  /** RegularExpression Id. */
  int PROTECTED = 54;
  /** RegularExpression Id. */
  int PUBLIC = 55;
  /** RegularExpression Id. */
  int RETURN = 56;
  /** RegularExpression Id. */
  int SHORT = 57;
  /** RegularExpression Id. */
  int STATIC = 58;
  /** RegularExpression Id. */
  int STRICTFP = 59;
  /** RegularExpression Id. */
  int SUPER = 60;
  /** RegularExpression Id. */
  int SWITCH = 61;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 62;
  /** RegularExpression Id. */
  int THIS = 63;
  /** RegularExpression Id. */
  int THROW = 64;
  /** RegularExpression Id. */
  int THROWS = 65;
  /** RegularExpression Id. */
  int TRANSIENT = 66;
  /** RegularExpression Id. */
  int TRUE = 67;
  /** RegularExpression Id. */
  int TRY = 68;
  /** RegularExpression Id. */
  int VOID = 69;
  /** RegularExpression Id. */
  int VOLATILE = 70;
  /** RegularExpression Id. */
  int WHILE = 71;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 72;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 73;
  /** RegularExpression Id. */
  int HEX_LITERAL = 74;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 75;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 76;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 77;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 78;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 79;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 80;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 81;
  /** RegularExpression Id. */
  int STRING_LITERAL = 82;
  /** RegularExpression Id. */
  int LPAREN = 83;
  /** RegularExpression Id. */
  int RPAREN = 84;
  /** RegularExpression Id. */
  int LBRACE = 85;
  /** RegularExpression Id. */
  int RBRACE = 86;
  /** RegularExpression Id. */
  int LBRACKET = 87;
  /** RegularExpression Id. */
  int RBRACKET = 88;
  /** RegularExpression Id. */
  int SEMICOLON = 89;
  /** RegularExpression Id. */
  int COMMA = 90;
  /** RegularExpression Id. */
  int DOT = 91;
  /** RegularExpression Id. */
  int ASSIGN = 92;
  /** RegularExpression Id. */
  int LT = 93;
  /** RegularExpression Id. */
  int GT = 94;
  /** RegularExpression Id. */
  int BANG = 95;
  /** RegularExpression Id. */
  int TILDE = 96;
  /** RegularExpression Id. */
  int HOOK = 97;
  /** RegularExpression Id. */
  int COLON = 98;
  /** RegularExpression Id. */
  int EQ = 99;
  /** RegularExpression Id. */
  int LE = 100;
  /** RegularExpression Id. */
  int GE = 101;
  /** RegularExpression Id. */
  int NE = 102;
  /** RegularExpression Id. */
  int SC_OR = 103;
  /** RegularExpression Id. */
  int SC_AND = 104;
  /** RegularExpression Id. */
  int INCR = 105;
  /** RegularExpression Id. */
  int DECR = 106;
  /** RegularExpression Id. */
  int PLUS = 107;
  /** RegularExpression Id. */
  int MINUS = 108;
  /** RegularExpression Id. */
  int STAR = 109;
  /** RegularExpression Id. */
  int SLASH = 110;
  /** RegularExpression Id. */
  int BIT_AND = 111;
  /** RegularExpression Id. */
  int BIT_OR = 112;
  /** RegularExpression Id. */
  int XOR = 113;
  /** RegularExpression Id. */
  int REM = 114;
  /** RegularExpression Id. */
  int PLUSASSIGN = 115;
  /** RegularExpression Id. */
  int MINUSASSIGN = 116;
  /** RegularExpression Id. */
  int STARASSIGN = 117;
  /** RegularExpression Id. */
  int SLASHASSIGN = 118;
  /** RegularExpression Id. */
  int ANDASSIGN = 119;
  /** RegularExpression Id. */
  int ORASSIGN = 120;
  /** RegularExpression Id. */
  int XORASSIGN = 121;
  /** RegularExpression Id. */
  int REMASSIGN = 122;
  /** RegularExpression Id. */
  int SHIFT_LEFT = 123;
  /** RegularExpression Id. */
  int SHIFT_RIGHT = 124;
  /** RegularExpression Id. */
  int ASSIGNMENT = 125;
  /** RegularExpression Id. */
  int CREATE = 126;
  /** RegularExpression Id. */
  int TYPE = 127;
  /** RegularExpression Id. */
  int VARIABLE = 128;
  /** RegularExpression Id. */
  int VALUE = 129;
  /** RegularExpression Id. */
  int FUNCTION = 130;
  /** RegularExpression Id. */
  int WITH = 131;
  /** RegularExpression Id. */
  int CONDITION = 132;
  /** RegularExpression Id. */
  int EXPRESSIONS = 133;
  /** RegularExpression Id. */
  int IF_BRANCH_START = 134;
  /** RegularExpression Id. */
  int IF_BRANCH_END = 135;
  /** RegularExpression Id. */
  int ELSE_BRANCH_START = 136;
  /** RegularExpression Id. */
  int ELSE_BRANCH_END = 137;
  /** RegularExpression Id. */
  int PRE = 138;
  /** RegularExpression Id. */
  int POST = 139;
  /** RegularExpression Id. */
  int TERMINATOR = 140;
  /** RegularExpression Id. */
  int PARAMETER = 141;
  /** RegularExpression Id. */
  int STRUCT = 142;
  /** RegularExpression Id. */
  int ARRAY = 143;
  /** RegularExpression Id. */
  int ACCESS = 144;
  /** RegularExpression Id. */
  int ACCESS_END = 145;
  /** RegularExpression Id. */
  int LABEL = 146;
  /** RegularExpression Id. */
  int INDEX = 147;
  /** RegularExpression Id. */
  int INCLUDE = 148;
  /** RegularExpression Id. */
  int FOR_START = 149;
  /** RegularExpression Id. */
  int FOR_END = 150;
  /** RegularExpression Id. */
  int WHILE_START = 151;
  /** RegularExpression Id. */
  int WHILE_END = 152;
  /** RegularExpression Id. */
  int SWITCH_START = 153;
  /** RegularExpression Id. */
  int SWITCH_END = 154;
  /** RegularExpression Id. */
  int CASE_START = 155;
  /** RegularExpression Id. */
  int CASE_END = 156;
  /** RegularExpression Id. */
  int FUNCTION_DEC = 157;
  /** RegularExpression Id. */
  int FUNCTION_START = 158;
  /** RegularExpression Id. */
  int FUNCTION_END = 159;
  /** RegularExpression Id. */
  int STRUCT_DEC = 160;
  /** RegularExpression Id. */
  int STRUCT_START = 161;
  /** RegularExpression Id. */
  int STRUCT_END = 162;
  /** RegularExpression Id. */
  int PROGRAM_END = 163;
  /** RegularExpression Id. */
  int PROGRAM_C = 164;
  /** RegularExpression Id. */
  int C_TYPES_MODIFIERS_SIGNED = 165;
  /** RegularExpression Id. */
  int C_TYPES_MODIFIERS_UNSIGNED = 166;
  /** RegularExpression Id. */
  int IDENTIFIER = 167;
  /** RegularExpression Id. */
  int LETTER = 168;
  /** RegularExpression Id. */
  int PART_LETTER = 169;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int AFTER_EGEN = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"LOOKAHEAD\"",
    "\"IGNORE_CASE\"",
    "\"PARSER_BEGIN\"",
    "\"PARSER_END\"",
    "\"JAVACODE\"",
    "\"TOKEN\"",
    "\"SPECIAL_TOKEN\"",
    "\"MORE\"",
    "\"SKIP\"",
    "\"TOKEN_MGR_DECLS\"",
    "\"EOF\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*@egen*/\"",
    "<token of kind 18>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<\"",
    "\" >>\"",
    "\"#assign\"",
    "\"#create\"",
    "\"#type\"",
    "\"#variable\"",
    "\"#value\"",
    "\"#function\"",
    "\"#with\"",
    "\"#condition\"",
    "\"#expression\"",
    "\"#if_branch_start\"",
    "\"#if_branch_end\"",
    "\"#else_branch_start\"",
    "\"#else_branch_end\"",
    "\"#pre\"",
    "\"#post\"",
    "\";;\"",
    "\"#parameter\"",
    "\"#struct\"",
    "\"#array\"",
    "\"#access\"",
    "\"#access_end\"",
    "\"#label\"",
    "\"#indexes\"",
    "\"#include\"",
    "\"#for_start\"",
    "\"#for_end\"",
    "\"#while_start\"",
    "\"#while_end\"",
    "\"#switch_start\"",
    "\"#switch_end\"",
    "\"#case_start\"",
    "\"#case_end\"",
    "\"#function_declare\"",
    "\"#function_start\"",
    "\"#function_end\"",
    "\"#struct_declare\"",
    "\"#struct_start\"",
    "\"#struct_end\"",
    "\"#program_end\"",
    "\"#c_program\"",
    "\"signed\"",
    "\"unsigned\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
  };

}
