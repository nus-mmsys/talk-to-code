/* Generated By:JavaCC: Do not edit this line. ASTParserTokenManager.java */
package ast;
import java.util.*;

/** Token Manager. */
public class ASTParserTokenManager implements ASTParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8000000L) != 0L)
            return 4;
         if ((active0 & 0xfffffffffff80ffeL) != 0L || (active1 & 0xffL) != 0L || (active2 & 0x6000000000L) != 0L)
         {
            jjmatchedKind = 167;
            return 28;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffffbfe7ff80ffeL) != 0L || (active1 & 0xffL) != 0L || (active2 & 0x6000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 1;
            }
            return 28;
         }
         if ((active0 & 0x40180000000L) != 0L)
            return 28;
         return -1;
      case 2:
         if ((active0 & 0x4c10000000800L) != 0L || (active1 & 0x10L) != 0L)
            return 28;
         if ((active0 & 0xfffb3aff7ff807feL) != 0L || (active1 & 0xefL) != 0L || (active2 & 0x6000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 2;
            }
            return 28;
         }
         return -1;
      case 3:
         if ((active0 & 0x8009020605800300L) != 0L || (active1 & 0x28L) != 0L)
            return 28;
         if ((active0 & 0x7ff2b8f97a7804feL) != 0L || (active1 & 0xc7L) != 0L || (active2 & 0x6000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 3;
            return 28;
         }
         return -1;
      case 4:
         if ((active0 & 0x6df2b809603800beL) != 0L || (active1 & 0x44L) != 0L || (active2 & 0x6000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 4;
            }
            return 28;
         }
         if ((active0 & 0x120000f01a400440L) != 0L || (active1 & 0x83L) != 0L)
            return 28;
         return -1;
      case 5:
         if ((active0 & 0x2582100100100000L) != 0L || (active1 & 0x2L) != 0L || (active2 & 0x2000000000L) != 0L)
            return 28;
         if ((active0 & 0x4870a848602804beL) != 0L || (active1 & 0x44L) != 0L || (active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 5;
            return 28;
         }
         return -1;
      case 6:
         if ((active0 & 0x30004840200000L) != 0L)
            return 28;
         if ((active0 & 0x4840a800200804beL) != 0L || (active1 & 0x44L) != 0L || (active2 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 6;
            }
            return 28;
         }
         return -1;
      case 7:
         if ((active0 & 0x800000020080020L) != 0L || (active1 & 0x40L) != 0L || (active2 & 0x4000000000L) != 0L)
            return 28;
         if ((active0 & 0x4040a8000000049eL) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 7;
            return 28;
         }
         return -1;
      case 8:
         if ((active0 & 0x400028000000049cL) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 8;
            }
            return 28;
         }
         if ((active0 & 0x40800000000002L) != 0L || (active1 & 0x4L) != 0L)
            return 28;
         return -1;
      case 9:
         if ((active0 & 0x280000000010L) != 0L)
            return 28;
         if ((active0 & 0x400000000000048cL) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 9;
            return 28;
         }
         return -1;
      case 10:
         if ((active0 & 0x4L) != 0L)
            return 28;
         if ((active0 & 0x4000000000000488L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 10;
            return 28;
         }
         return -1;
      case 11:
         if ((active0 & 0x4000000000000008L) != 0L)
            return 28;
         if ((active0 & 0x480L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 11;
            return 28;
         }
         return -1;
      case 12:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 12;
            return 28;
         }
         if ((active0 & 0x80L) != 0L)
            return 28;
         return -1;
      case 13:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 13;
            return 28;
         }
         return -1;
      case 14:
         if ((active0 & 0x400L) != 0L)
            return 28;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L, 0x0L);
      case 33:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000000L, 0x1fffffefffL);
      case 37:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80010000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 83);
      case 41:
         return jjStopAtPos(0, 84);
      case 42:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8020000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 90);
      case 45:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10040000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 91, 4);
      case 47:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x40000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 98);
      case 59:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
      case 60:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800001000000000L, 0x0L);
      case 61:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L, 0x0L);
      case 62:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 97);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x18L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x280L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x440L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 87);
      case 93:
         return jjStopAtPos(0, 88);
      case 94:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x180000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xe00000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1c0000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xe00000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xfc0000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xe000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xf0000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x7e00000000000000L, 0x0L, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1fL, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L, 0x0L);
      case 123:
         return jjStopAtPos(0, 85);
      case 124:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100008000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 86);
      case 126:
         return jjStopAtPos(0, 96);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 42:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 43:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         break;
      case 45:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      case 59:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         break;
      case 60:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         break;
      case 61:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x38L, active1, 0L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0xd42L, active1, 0L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x12001003000000L, active1, 0x2000000000000000L, active2, 0x38000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x1018000010L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x104000040000000L, active1, 0L, active2, 0x320L);
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 28);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xe0600004L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8200000004000000L, active1, 0x83L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000L, active1, 0L, active2, 0x20001800c0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8208000000L, active1, 0L, active2, 0x40000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00400000000L, active1, 0L, active2, 0x4000000000L);
      case 111:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1030130200000L, active1, 0x60L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800002c00L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000400000L, active1, 0x1cL, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L, active2, 0x706004000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1088000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x3L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x1800008L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000800000L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 124);
         break;
      case 64:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 70:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 28);
         break;
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x440L, active1, 0L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x118L, active1, 0L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000c000000L, active1, 0x4L, active2, 0x18042003L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L, active2, 0x30000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L, active2, 0xc0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1800000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa020000000000000L, active1, 0xa0L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000000000L, active1, 0x40L, active2, 0x300L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001006030000000L, active1, 0L, active2, 0x180000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x240008000200000L, active1, 0L, active2, 0x600810L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000180000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x4000000000000003L, active2, 0x800008400L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200201180000L, active1, 0x2000000000000000L, active2, 0x4000000000L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x102820802800000L, active1, 0L, active2, 0x700004000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000L, active1, 0x8L, active2, 0xe0000004L);
      case 119:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x6000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 121:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x440L, active1, 0L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 80:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 28);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x18L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0xc0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xe040400000L, active1, 0x40L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L, active2, 0x40000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000002000000L, active1, 0L, active2, 0x130000L);
      case 100:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 28);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 28);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 28);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 28);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(3, 138);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000800800120000L, active1, 0x4000000000000000L, active2, 0L);
      case 103:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x802000000000000L, active1, 0L, active2, 0x4007800000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x80080000200000L, active1, 0x80L, active2, 0x2L);
      case 109:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 28);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L, active2, 0x20e0000014L);
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x3L, active2, 0x800000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x1000000020L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L, active2, 0x70060e001L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x1018000000L, active1, 0x2000000000000000L, active2, 0x18000b00L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2440200020080000L, active1, 0L, active2, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x18L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x600000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x30200000000000L, active1, 0x4000000000000000L, active2, 0xa000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xc0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2800000000000000L, active1, 0L, active2, 0xe0000004L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 28);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 28);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(4, 127);
         return jjMoveStringLiteralDfa5_0(active0, 0x40080000200000L, active1, 0L, active2, 0x20180f0300L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L, active2, 0x4800000000L);
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 28);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(4, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x480000020000000L, active1, 0x2000000000000000L, active2, 0x1L);
      case 107:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 28);
         break;
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4100000000L, active1, 0L, active2, 0x1900000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x100900000180000L, active1, 0L, active2, 0x1000000020L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 28);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 28);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 28);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(4, 139);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L, active2, 0x6000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L, active2, 0x700004002L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x18L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L, active2, 0x18000300L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000L, active1, 0L, active2, 0x1L);
      case 99:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 28);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L, active2, 0x706004000L);
      case 100:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 165, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 28);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 28);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(5, 129);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L, active2, 0x1c00020L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x2000000000000000L, active2, 0L);
      case 104:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x44L, active2, 0x10L);
      case 108:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(5, 146);
         return jjMoveStringLiteralDfa6_0(active0, 0x4040000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L, active2, 0x2000L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x200020000000L, active1, 0L, active2, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x8000000c0L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x230000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 28);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x820000000000000L, active1, 0x4000000000000000L, active2, 0xe0000004L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 121:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(5, 143);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x1cL, active1, 0L, active2, 0x1800000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L, active2, 0x8000000c0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x301L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000080000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 28);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 28);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 126);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x4L, active2, 0x4010082000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x6000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0xe0000004L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 28);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(6, 125);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L, active2, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 28);
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8020020L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 28);
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L, active2, 0x700200010L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0x8L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x10L, active1, 0L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L, active1, 0L, active2, 0x706020000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(7, 150);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 166, 28);
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 28);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 28);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(7, 148);
         return jjMoveStringLiteralDfa8_0(active0, 0x40200000000000L, active1, 0L, active2, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000080000000000L, active1, 0x4L, active2, 0x100000c0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xe0000004L);
      case 112:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 28);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000000300L);
      case 115:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(7, 147);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800020L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8002000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(8, 17);
         break;
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 1, 28);
         break;
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x8L, active1, 0L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x10L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1008000300L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xc0L);
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 28);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 156);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x100000000L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 28);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(8, 128);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x404022000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x20L);
      case 110:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xe1000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0L, active2, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x202000000L);
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 66, 28);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L, active2, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, active2);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 4, 28);
         break;
      case 71:
         return jjMoveStringLiteralDfa10_0(active0, 0x8L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x80L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x4L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L, active2, 0xe0000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x800000L);
      case 100:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(9, 152);
         break;
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x900000000L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 45, 28);
         break;
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0xc0L);
      case 109:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(9, 164);
         break;
      case 110:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(9, 132);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x404020300L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x20L);
      case 114:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(9, 141);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x8000000L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 28);
         break;
      case 116:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(9, 149);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x202000000L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, active2);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L, active2, 0L);
      case 69:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(10, 2, 28);
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x8L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0xc0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x202000000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x100000300L);
      case 100:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(10, 145);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(10, 154);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(10, 162);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active2, 0x80000000L);
      case 110:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(10, 133);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x800000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x40000000L);
      case 116:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(10, 155);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, active2);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x480L, active2, 0L);
      case 78:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 3, 28);
         break;
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 62, 28);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(11, 163);
         break;
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x20000080L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x300L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x202000000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x40L);
      case 116:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(11, 151);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, active2);
      return 12;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x400L, active2, 0L);
      case 78:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(12, 7, 28);
         break;
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x300L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x140000000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x20000000L);
      case 100:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(12, 159);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x80L);
      case 116:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(12, 153);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(12, 161);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, active2);
      return 13;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x40L);
      case 100:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(13, 135);
         break;
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x140000000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, active2);
      return 14;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(14, 10, 28);
         break;
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x20000000L);
      case 101:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(14, 160);
         break;
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x40L);
      case 116:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(14, 158);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active2, 0x100L);
      case 100:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(15, 137);
         break;
      case 114:
         return jjMoveStringLiteralDfa16_0(active2, 0x20000000L);
      case 116:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(15, 134);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, active2);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(16, 157);
         break;
      case 114:
         return jjMoveStringLiteralDfa17_0(active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2);
      return 17;
   }
   switch(curChar)
   {
      case 116:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(17, 136);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 36)
                  {
                     if (kind > 167)
                        kind = 167;
                     jjCheckNAdd(28);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAddStates(12, 16);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(17, 19);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 81)
                     kind = 81;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 22:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 8);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(37, 8);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar != 46)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(27, 29);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(27, 29);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(43, 8);
                  break;
               case 44:
                  if (curChar != 48)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddStates(12, 16);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 47:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(47, 2);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 50:
                  if (curChar == 46)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(54, 8);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 57:
                  if (curChar == 46)
                     jjCheckNAdd(58);
                  break;
               case 59:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(60, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAdd(28);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 76)
                     kind = 76;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(37, 39);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(40, 42);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 45:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 48:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 52:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 55:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 58:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   return 1;
}
static final int[] jjnextStates = {
   30, 31, 8, 34, 35, 38, 39, 19, 20, 22, 10, 12, 45, 47, 2, 48, 
   55, 4, 5, 8, 19, 20, 24, 22, 30, 31, 8, 40, 41, 8, 49, 50, 
   56, 57, 58, 6, 7, 13, 14, 16, 21, 23, 25, 32, 33, 36, 37, 42, 
   43, 51, 52, 53, 54, 59, 60, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\114\117\117\113\101\110\105\101\104", 
"\111\107\116\117\122\105\137\103\101\123\105", "\120\101\122\123\105\122\137\102\105\107\111\116", 
"\120\101\122\123\105\122\137\105\116\104", "\112\101\126\101\103\117\104\105", "\124\117\113\105\116", 
"\123\120\105\103\111\101\114\137\124\117\113\105\116", "\115\117\122\105", "\123\113\111\120", 
"\124\117\113\105\116\137\115\107\122\137\104\105\103\114\123", "\105\117\106", null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", 
"\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", null, null, null, null, null, null, null, null, null, 
null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", 
"\75", "\74", "\76", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", 
"\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", 
"\174", "\136", "\45", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", 
"\136\75", "\45\75", "\74\74", "\40\76\76", "\43\141\163\163\151\147\156", 
"\43\143\162\145\141\164\145", "\43\164\171\160\145", "\43\166\141\162\151\141\142\154\145", 
"\43\166\141\154\165\145", "\43\146\165\156\143\164\151\157\156", "\43\167\151\164\150", 
"\43\143\157\156\144\151\164\151\157\156", "\43\145\170\160\162\145\163\163\151\157\156", 
"\43\151\146\137\142\162\141\156\143\150\137\163\164\141\162\164", "\43\151\146\137\142\162\141\156\143\150\137\145\156\144", 
"\43\145\154\163\145\137\142\162\141\156\143\150\137\163\164\141\162\164", "\43\145\154\163\145\137\142\162\141\156\143\150\137\145\156\144", 
"\43\160\162\145", "\43\160\157\163\164", "\73\73", "\43\160\141\162\141\155\145\164\145\162", 
"\43\163\164\162\165\143\164", "\43\141\162\162\141\171", "\43\141\143\143\145\163\163", 
"\43\141\143\143\145\163\163\137\145\156\144", "\43\154\141\142\145\154", "\43\151\156\144\145\170\145\163", 
"\43\151\156\143\154\165\144\145", "\43\146\157\162\137\163\164\141\162\164", "\43\146\157\162\137\145\156\144", 
"\43\167\150\151\154\145\137\163\164\141\162\164", "\43\167\150\151\154\145\137\145\156\144", 
"\43\163\167\151\164\143\150\137\163\164\141\162\164", "\43\163\167\151\164\143\150\137\145\156\144", 
"\43\143\141\163\145\137\163\164\141\162\164", "\43\143\141\163\145\137\145\156\144", 
"\43\146\165\156\143\164\151\157\156\137\144\145\143\154\141\162\145", "\43\146\165\156\143\164\151\157\156\137\163\164\141\162\164", 
"\43\146\165\156\143\164\151\157\156\137\145\156\144", "\43\163\164\162\165\143\164\137\144\145\143\154\141\162\145", 
"\43\163\164\162\165\143\164\137\163\164\141\162\164", "\43\163\164\162\165\143\164\137\145\156\144", 
"\43\160\162\157\147\162\141\155\137\145\156\144", "\43\143\137\160\162\157\147\162\141\155", "\163\151\147\156\145\144", 
"\165\156\163\151\147\156\145\144", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "AFTER_EGEN",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffff80fffL, 0xfffffffffffe11ffL, 0xffffffffffL, 
};
static final long[] jjtoSkip = {
   0x7f000L, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[61];
static private final int[] jjstateSet = new int[122];
static protected char curChar;
/** Constructor. */
public ASTParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ASTParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 13 && (0x3600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 18)
       {
          jjmatchedKind = 18;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
